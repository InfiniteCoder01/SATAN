use portable::PortRw as _;

/// Enable interrupts
#[inline]
pub fn enable() {
    unsafe {
        core::arch::asm!("sti");
    }
}

/// Disable interrupts
#[inline]
pub fn disable() {
    unsafe {
        core::arch::asm!("cli");
    }
}

// -------------------------------- ISR
/// Interrupt stack frame
#[repr(C)]
struct InterruptStackFrame {
    instruction_pointer: usize,
    code_segment: u16,
    flags: usize,
    #[cfg(target_arch = "x86_64")]
    stack_pointer: usize,
    #[cfg(target_arch = "x86_64")]
    stack_segment: u16,
}

/// Central interrupt handler, all interrupts come here specifying an interrupt number
fn interrupt_handler(interrupt: u8, error_code: usize) {
    if interrupt == 0x0E {
        // Page fault
        crate::println!("Page fault!\nError code:\n{:#032b}", error_code);
        crate::println!("                ^        ^^IRUWP");
        crate::println!("               SGX      SSPK    ");
        return;
    }
    if interrupt == 0x20 {
        // Timer
        return;
    }
    if interrupt == 0x21 {
        // Keyboard
        let scancode = u8::read(0x60);
        crate::println!("Keyboard: {}", scancode);
        return;
    }

    loop {}
}

// -------------------------------- IDT
/// IDT descriptor, one per interrupt
#[repr(C, packed)]
struct IDTDescriptor {
    offset_1: u16,       // offset bits 0..15
    selector: u16,       // a code segment selector in GDT or LDT
    reserved1: u8,       // unused, set to 0
    type_attributes: u8, // gate type, dpl, and p fields
    offset_2: u16,       // offset bits 16..31
    #[cfg(target_arch = "x86_64")]
    offset_3: u32, // offset bits 32..63
    #[cfg(target_arch = "x86_64")]
    reserved2: u32, // unused, set to 0
}

impl IDTDescriptor {
    /// Null descriptor
    const NULL: Self = Self {
        offset_1: 0,
        selector: 0,
        reserved1: 0,
        type_attributes: 0,
        offset_2: 0,
        #[cfg(target_arch = "x86_64")]
        offset_3: 0,
        #[cfg(target_arch = "x86_64")]
        reserved2: 0,
    };

    fn new(offset: usize, selector: u16, type_attributes: u8) -> Self {
        Self {
            offset_1: (offset & 0xffff) as _,
            selector,
            reserved1: 0,
            type_attributes,
            offset_2: (offset >> 16 & 0xffff) as _,
            #[cfg(target_arch = "x86_64")]
            offset_3: (offset >> 32 & 0xffffffff) as _,
            #[cfg(target_arch = "x86_64")]
            reserved2: 0,
        }
    }
}

/// IDTR, holds address and size of the IDT
#[repr(C, packed)]
struct Idtr {
    limit: u16,
    base: usize,
}

type Idt = [IDTDescriptor; 256];
static mut IDT: Idt = [IDTDescriptor::NULL; 256];
static mut IDTR: Idtr = Idtr { limit: 0, base: 0 };

// -------------------------------- All the interrupts
macro_rules! int {
    ($($name: ident($($params: tt),+),)*) => {
        $(
            int!($name($($params),+));
        )*
    };
    ($name: ident($no: literal)) => {
        extern "x86-interrupt" fn $name () {
            unsafe {
                core::arch::asm!("pusha", options(att_syntax));
                interrupt_handler($no, 0);
                core::arch::asm!("popa", options(att_syntax));
            }
        }
    };
    ($name: ident($no: literal, ec)) => {
        extern "x86-interrupt" fn $name (error_code: usize) {
            unsafe {
                core::arch::asm!("pusha", options(att_syntax));
                interrupt_handler($no, error_code);
                core::arch::asm!("popa", options(att_syntax));
            }
        }
    };
    ($name: ident($no: literal, m)) => {
        extern "x86-interrupt" fn $name () {
            unsafe {
                core::arch::asm!("pusha", options(att_syntax));
                interrupt_handler($no, 0);
                u8::write(0x20, 0x20);
                core::arch::asm!("popa", options(att_syntax));
            }
        }
    };
    ($name: ident($no: literal, s)) => {
        extern "x86-interrupt" fn $name () {
            unsafe {
                core::arch::asm!("pusha", options(att_syntax));
                interrupt_handler($no, 0);
                u8::write(0x20, 0x20);
                u8::write(0xa0, 0x20);
                core::arch::asm!("popa", options(att_syntax));
            }
        }
    };
}

// Define all interrupts
// ec stands for error code, means that this interrupt pushes an error-code onto the stack
// m stands for master, which tells interrupt handler to send EOI to master PIC
// s stands for slave, which tells interrupt handler to send EOI to both master and slave PICs
int! {
    int_0x00(0x00), int_0x01(0x01), int_0x02(0x02), int_0x03(0x03), int_0x04(0x04), int_0x05(0x05), int_0x06(0x06), int_0x07(0x07), int_0x08(0x08, ec), int_0x09(0x09), int_0x0a(0x0a, ec), int_0x0b(0x0b, ec), int_0x0c(0x0c, ec), int_0x0d(0x0d, ec), int_0x0e(0x0e, ec), int_0x0f(0x0f),
    int_0x10(0x10), int_0x11(0x11, ec), int_0x12(0x12), int_0x13(0x13), int_0x14(0x14), int_0x15(0x15, ec), int_0x16(0x16), int_0x17(0x17), int_0x18(0x18), int_0x19(0x19), int_0x1a(0x1a), int_0x1b(0x1b), int_0x1c(0x1c), int_0x1d(0x1d, ec), int_0x1e(0x1e, ec), int_0x1f(0x1f),
    int_0x20(0x20, m), int_0x21(0x21, m), int_0x22(0x22, m), int_0x23(0x23, m), int_0x24(0x24, m), int_0x25(0x25, m), int_0x26(0x26, m), int_0x27(0x27, m), int_0x28(0x28, s), int_0x29(0x29, s), int_0x2a(0x2a, s), int_0x2b(0x2b, s), int_0x2c(0x2c, s), int_0x2d(0x2d, s), int_0x2e(0x2e, s), int_0x2f(0x2f, s),
    int_0x30(0x30), int_0x31(0x31), int_0x32(0x32), int_0x33(0x33), int_0x34(0x34), int_0x35(0x35), int_0x36(0x36), int_0x37(0x37), int_0x38(0x38), int_0x39(0x39), int_0x3a(0x3a), int_0x3b(0x3b), int_0x3c(0x3c), int_0x3d(0x3d), int_0x3e(0x3e), int_0x3f(0x3f),
    int_0x40(0x40), int_0x41(0x41), int_0x42(0x42), int_0x43(0x43), int_0x44(0x44), int_0x45(0x45), int_0x46(0x46), int_0x47(0x47), int_0x48(0x48), int_0x49(0x49), int_0x4a(0x4a), int_0x4b(0x4b), int_0x4c(0x4c), int_0x4d(0x4d), int_0x4e(0x4e), int_0x4f(0x4f),
    int_0x50(0x50), int_0x51(0x51), int_0x52(0x52), int_0x53(0x53), int_0x54(0x54), int_0x55(0x55), int_0x56(0x56), int_0x57(0x57), int_0x58(0x58), int_0x59(0x59), int_0x5a(0x5a), int_0x5b(0x5b), int_0x5c(0x5c), int_0x5d(0x5d), int_0x5e(0x5e), int_0x5f(0x5f),
    int_0x60(0x60), int_0x61(0x61), int_0x62(0x62), int_0x63(0x63), int_0x64(0x64), int_0x65(0x65), int_0x66(0x66), int_0x67(0x67), int_0x68(0x68), int_0x69(0x69), int_0x6a(0x6a), int_0x6b(0x6b), int_0x6c(0x6c), int_0x6d(0x6d), int_0x6e(0x6e), int_0x6f(0x6f),
    int_0x70(0x70), int_0x71(0x71), int_0x72(0x72), int_0x73(0x73), int_0x74(0x74), int_0x75(0x75), int_0x76(0x76), int_0x77(0x77), int_0x78(0x78), int_0x79(0x79), int_0x7a(0x7a), int_0x7b(0x7b), int_0x7c(0x7c), int_0x7d(0x7d), int_0x7e(0x7e), int_0x7f(0x7f),
    int_0x80(0x80), int_0x81(0x81), int_0x82(0x82), int_0x83(0x83), int_0x84(0x84), int_0x85(0x85), int_0x86(0x86), int_0x87(0x87), int_0x88(0x88), int_0x89(0x89), int_0x8a(0x8a), int_0x8b(0x8b), int_0x8c(0x8c), int_0x8d(0x8d), int_0x8e(0x8e), int_0x8f(0x8f),
    int_0x90(0x90), int_0x91(0x91), int_0x92(0x92), int_0x93(0x93), int_0x94(0x94), int_0x95(0x95), int_0x96(0x96), int_0x97(0x97), int_0x98(0x98), int_0x99(0x99), int_0x9a(0x9a), int_0x9b(0x9b), int_0x9c(0x9c), int_0x9d(0x9d), int_0x9e(0x9e), int_0x9f(0x9f),
    int_0xa0(0xa0), int_0xa1(0xa1), int_0xa2(0xa2), int_0xa3(0xa3), int_0xa4(0xa4), int_0xa5(0xa5), int_0xa6(0xa6), int_0xa7(0xa7), int_0xa8(0xa8), int_0xa9(0xa9), int_0xaa(0xaa), int_0xab(0xab), int_0xac(0xac), int_0xad(0xad), int_0xae(0xae), int_0xaf(0xaf),
    int_0xb0(0xb0), int_0xb1(0xb1), int_0xb2(0xb2), int_0xb3(0xb3), int_0xb4(0xb4), int_0xb5(0xb5), int_0xb6(0xb6), int_0xb7(0xb7), int_0xb8(0xb8), int_0xb9(0xb9), int_0xba(0xba), int_0xbb(0xbb), int_0xbc(0xbc), int_0xbd(0xbd), int_0xbe(0xbe), int_0xbf(0xbf),
    int_0xc0(0xc0), int_0xc1(0xc1), int_0xc2(0xc2), int_0xc3(0xc3), int_0xc4(0xc4), int_0xc5(0xc5), int_0xc6(0xc6), int_0xc7(0xc7), int_0xc8(0xc8), int_0xc9(0xc9), int_0xca(0xca), int_0xcb(0xcb), int_0xcc(0xcc), int_0xcd(0xcd), int_0xce(0xce), int_0xcf(0xcf),
    int_0xd0(0xd0), int_0xd1(0xd1), int_0xd2(0xd2), int_0xd3(0xd3), int_0xd4(0xd4), int_0xd5(0xd5), int_0xd6(0xd6), int_0xd7(0xd7), int_0xd8(0xd8), int_0xd9(0xd9), int_0xda(0xda), int_0xdb(0xdb), int_0xdc(0xdc), int_0xdd(0xdd), int_0xde(0xde), int_0xdf(0xdf),
    int_0xe0(0xe0), int_0xe1(0xe1), int_0xe2(0xe2), int_0xe3(0xe3), int_0xe4(0xe4), int_0xe5(0xe5), int_0xe6(0xe6), int_0xe7(0xe7), int_0xe8(0xe8), int_0xe9(0xe9), int_0xea(0xea), int_0xeb(0xeb), int_0xec(0xec), int_0xed(0xed), int_0xee(0xee), int_0xef(0xef),
    int_0xf0(0xf0), int_0xf1(0xf1), int_0xf2(0xf2), int_0xf3(0xf3), int_0xf4(0xf4), int_0xf5(0xf5), int_0xf6(0xf6), int_0xf7(0xf7), int_0xf8(0xf8), int_0xf9(0xf9), int_0xfa(0xfa), int_0xfb(0xfb), int_0xfc(0xfc), int_0xfd(0xfd), int_0xfe(0xfe), int_0xff(0xff),
}

/// Setup IDT and program the PIC
#[link_section = ".bootstrap"]
pub(super) fn setup() {
    unsafe {
        IDT[0x00] = IDTDescriptor::new(int_0x00 as usize, 0x08, 0x8E);
        IDT[0x01] = IDTDescriptor::new(int_0x01 as usize, 0x08, 0x8E);
        IDT[0x02] = IDTDescriptor::new(int_0x02 as usize, 0x08, 0x8E);
        IDT[0x03] = IDTDescriptor::new(int_0x03 as usize, 0x08, 0x8E);
        IDT[0x04] = IDTDescriptor::new(int_0x04 as usize, 0x08, 0x8E);
        IDT[0x05] = IDTDescriptor::new(int_0x05 as usize, 0x08, 0x8E);
        IDT[0x06] = IDTDescriptor::new(int_0x06 as usize, 0x08, 0x8E);
        IDT[0x07] = IDTDescriptor::new(int_0x07 as usize, 0x08, 0x8E);
        IDT[0x08] = IDTDescriptor::new(int_0x08 as usize, 0x08, 0x8E);
        IDT[0x09] = IDTDescriptor::new(int_0x09 as usize, 0x08, 0x8E);
        IDT[0x0a] = IDTDescriptor::new(int_0x0a as usize, 0x08, 0x8E);
        IDT[0x0b] = IDTDescriptor::new(int_0x0b as usize, 0x08, 0x8E);
        IDT[0x0c] = IDTDescriptor::new(int_0x0c as usize, 0x08, 0x8E);
        IDT[0x0d] = IDTDescriptor::new(int_0x0d as usize, 0x08, 0x8E);
        IDT[0x0e] = IDTDescriptor::new(int_0x0e as usize, 0x08, 0x8E);
        IDT[0x0f] = IDTDescriptor::new(int_0x0f as usize, 0x08, 0x8E);
        IDT[0x10] = IDTDescriptor::new(int_0x10 as usize, 0x08, 0x8E);
        IDT[0x11] = IDTDescriptor::new(int_0x11 as usize, 0x08, 0x8E);
        IDT[0x12] = IDTDescriptor::new(int_0x12 as usize, 0x08, 0x8E);
        IDT[0x13] = IDTDescriptor::new(int_0x13 as usize, 0x08, 0x8E);
        IDT[0x14] = IDTDescriptor::new(int_0x14 as usize, 0x08, 0x8E);
        IDT[0x15] = IDTDescriptor::new(int_0x15 as usize, 0x08, 0x8E);
        IDT[0x16] = IDTDescriptor::new(int_0x16 as usize, 0x08, 0x8E);
        IDT[0x17] = IDTDescriptor::new(int_0x17 as usize, 0x08, 0x8E);
        IDT[0x18] = IDTDescriptor::new(int_0x18 as usize, 0x08, 0x8E);
        IDT[0x19] = IDTDescriptor::new(int_0x19 as usize, 0x08, 0x8E);
        IDT[0x1a] = IDTDescriptor::new(int_0x1a as usize, 0x08, 0x8E);
        IDT[0x1b] = IDTDescriptor::new(int_0x1b as usize, 0x08, 0x8E);
        IDT[0x1c] = IDTDescriptor::new(int_0x1c as usize, 0x08, 0x8E);
        IDT[0x1d] = IDTDescriptor::new(int_0x1d as usize, 0x08, 0x8E);
        IDT[0x1e] = IDTDescriptor::new(int_0x1e as usize, 0x08, 0x8E);
        IDT[0x1f] = IDTDescriptor::new(int_0x1f as usize, 0x08, 0x8E);
        IDT[0x20] = IDTDescriptor::new(int_0x20 as usize, 0x08, 0x8E);
        IDT[0x21] = IDTDescriptor::new(int_0x21 as usize, 0x08, 0x8E);
        IDT[0x22] = IDTDescriptor::new(int_0x22 as usize, 0x08, 0x8E);
        IDT[0x23] = IDTDescriptor::new(int_0x23 as usize, 0x08, 0x8E);
        IDT[0x24] = IDTDescriptor::new(int_0x24 as usize, 0x08, 0x8E);
        IDT[0x25] = IDTDescriptor::new(int_0x25 as usize, 0x08, 0x8E);
        IDT[0x26] = IDTDescriptor::new(int_0x26 as usize, 0x08, 0x8E);
        IDT[0x27] = IDTDescriptor::new(int_0x27 as usize, 0x08, 0x8E);
        IDT[0x28] = IDTDescriptor::new(int_0x28 as usize, 0x08, 0x8E);
        IDT[0x29] = IDTDescriptor::new(int_0x29 as usize, 0x08, 0x8E);
        IDT[0x2a] = IDTDescriptor::new(int_0x2a as usize, 0x08, 0x8E);
        IDT[0x2b] = IDTDescriptor::new(int_0x2b as usize, 0x08, 0x8E);
        IDT[0x2c] = IDTDescriptor::new(int_0x2c as usize, 0x08, 0x8E);
        IDT[0x2d] = IDTDescriptor::new(int_0x2d as usize, 0x08, 0x8E);
        IDT[0x2e] = IDTDescriptor::new(int_0x2e as usize, 0x08, 0x8E);
        IDT[0x2f] = IDTDescriptor::new(int_0x2f as usize, 0x08, 0x8E);
        IDT[0x30] = IDTDescriptor::new(int_0x30 as usize, 0x08, 0x8E);
        IDT[0x31] = IDTDescriptor::new(int_0x31 as usize, 0x08, 0x8E);
        IDT[0x32] = IDTDescriptor::new(int_0x32 as usize, 0x08, 0x8E);
        IDT[0x33] = IDTDescriptor::new(int_0x33 as usize, 0x08, 0x8E);
        IDT[0x34] = IDTDescriptor::new(int_0x34 as usize, 0x08, 0x8E);
        IDT[0x35] = IDTDescriptor::new(int_0x35 as usize, 0x08, 0x8E);
        IDT[0x36] = IDTDescriptor::new(int_0x36 as usize, 0x08, 0x8E);
        IDT[0x37] = IDTDescriptor::new(int_0x37 as usize, 0x08, 0x8E);
        IDT[0x38] = IDTDescriptor::new(int_0x38 as usize, 0x08, 0x8E);
        IDT[0x39] = IDTDescriptor::new(int_0x39 as usize, 0x08, 0x8E);
        IDT[0x3a] = IDTDescriptor::new(int_0x3a as usize, 0x08, 0x8E);
        IDT[0x3b] = IDTDescriptor::new(int_0x3b as usize, 0x08, 0x8E);
        IDT[0x3c] = IDTDescriptor::new(int_0x3c as usize, 0x08, 0x8E);
        IDT[0x3d] = IDTDescriptor::new(int_0x3d as usize, 0x08, 0x8E);
        IDT[0x3e] = IDTDescriptor::new(int_0x3e as usize, 0x08, 0x8E);
        IDT[0x3f] = IDTDescriptor::new(int_0x3f as usize, 0x08, 0x8E);
        IDT[0x40] = IDTDescriptor::new(int_0x40 as usize, 0x08, 0x8E);
        IDT[0x41] = IDTDescriptor::new(int_0x41 as usize, 0x08, 0x8E);
        IDT[0x42] = IDTDescriptor::new(int_0x42 as usize, 0x08, 0x8E);
        IDT[0x43] = IDTDescriptor::new(int_0x43 as usize, 0x08, 0x8E);
        IDT[0x44] = IDTDescriptor::new(int_0x44 as usize, 0x08, 0x8E);
        IDT[0x45] = IDTDescriptor::new(int_0x45 as usize, 0x08, 0x8E);
        IDT[0x46] = IDTDescriptor::new(int_0x46 as usize, 0x08, 0x8E);
        IDT[0x47] = IDTDescriptor::new(int_0x47 as usize, 0x08, 0x8E);
        IDT[0x48] = IDTDescriptor::new(int_0x48 as usize, 0x08, 0x8E);
        IDT[0x49] = IDTDescriptor::new(int_0x49 as usize, 0x08, 0x8E);
        IDT[0x4a] = IDTDescriptor::new(int_0x4a as usize, 0x08, 0x8E);
        IDT[0x4b] = IDTDescriptor::new(int_0x4b as usize, 0x08, 0x8E);
        IDT[0x4c] = IDTDescriptor::new(int_0x4c as usize, 0x08, 0x8E);
        IDT[0x4d] = IDTDescriptor::new(int_0x4d as usize, 0x08, 0x8E);
        IDT[0x4e] = IDTDescriptor::new(int_0x4e as usize, 0x08, 0x8E);
        IDT[0x4f] = IDTDescriptor::new(int_0x4f as usize, 0x08, 0x8E);
        IDT[0x50] = IDTDescriptor::new(int_0x50 as usize, 0x08, 0x8E);
        IDT[0x51] = IDTDescriptor::new(int_0x51 as usize, 0x08, 0x8E);
        IDT[0x52] = IDTDescriptor::new(int_0x52 as usize, 0x08, 0x8E);
        IDT[0x53] = IDTDescriptor::new(int_0x53 as usize, 0x08, 0x8E);
        IDT[0x54] = IDTDescriptor::new(int_0x54 as usize, 0x08, 0x8E);
        IDT[0x55] = IDTDescriptor::new(int_0x55 as usize, 0x08, 0x8E);
        IDT[0x56] = IDTDescriptor::new(int_0x56 as usize, 0x08, 0x8E);
        IDT[0x57] = IDTDescriptor::new(int_0x57 as usize, 0x08, 0x8E);
        IDT[0x58] = IDTDescriptor::new(int_0x58 as usize, 0x08, 0x8E);
        IDT[0x59] = IDTDescriptor::new(int_0x59 as usize, 0x08, 0x8E);
        IDT[0x5a] = IDTDescriptor::new(int_0x5a as usize, 0x08, 0x8E);
        IDT[0x5b] = IDTDescriptor::new(int_0x5b as usize, 0x08, 0x8E);
        IDT[0x5c] = IDTDescriptor::new(int_0x5c as usize, 0x08, 0x8E);
        IDT[0x5d] = IDTDescriptor::new(int_0x5d as usize, 0x08, 0x8E);
        IDT[0x5e] = IDTDescriptor::new(int_0x5e as usize, 0x08, 0x8E);
        IDT[0x5f] = IDTDescriptor::new(int_0x5f as usize, 0x08, 0x8E);
        IDT[0x60] = IDTDescriptor::new(int_0x60 as usize, 0x08, 0x8E);
        IDT[0x61] = IDTDescriptor::new(int_0x61 as usize, 0x08, 0x8E);
        IDT[0x62] = IDTDescriptor::new(int_0x62 as usize, 0x08, 0x8E);
        IDT[0x63] = IDTDescriptor::new(int_0x63 as usize, 0x08, 0x8E);
        IDT[0x64] = IDTDescriptor::new(int_0x64 as usize, 0x08, 0x8E);
        IDT[0x65] = IDTDescriptor::new(int_0x65 as usize, 0x08, 0x8E);
        IDT[0x66] = IDTDescriptor::new(int_0x66 as usize, 0x08, 0x8E);
        IDT[0x67] = IDTDescriptor::new(int_0x67 as usize, 0x08, 0x8E);
        IDT[0x68] = IDTDescriptor::new(int_0x68 as usize, 0x08, 0x8E);
        IDT[0x69] = IDTDescriptor::new(int_0x69 as usize, 0x08, 0x8E);
        IDT[0x6a] = IDTDescriptor::new(int_0x6a as usize, 0x08, 0x8E);
        IDT[0x6b] = IDTDescriptor::new(int_0x6b as usize, 0x08, 0x8E);
        IDT[0x6c] = IDTDescriptor::new(int_0x6c as usize, 0x08, 0x8E);
        IDT[0x6d] = IDTDescriptor::new(int_0x6d as usize, 0x08, 0x8E);
        IDT[0x6e] = IDTDescriptor::new(int_0x6e as usize, 0x08, 0x8E);
        IDT[0x6f] = IDTDescriptor::new(int_0x6f as usize, 0x08, 0x8E);
        IDT[0x70] = IDTDescriptor::new(int_0x70 as usize, 0x08, 0x8E);
        IDT[0x71] = IDTDescriptor::new(int_0x71 as usize, 0x08, 0x8E);
        IDT[0x72] = IDTDescriptor::new(int_0x72 as usize, 0x08, 0x8E);
        IDT[0x73] = IDTDescriptor::new(int_0x73 as usize, 0x08, 0x8E);
        IDT[0x74] = IDTDescriptor::new(int_0x74 as usize, 0x08, 0x8E);
        IDT[0x75] = IDTDescriptor::new(int_0x75 as usize, 0x08, 0x8E);
        IDT[0x76] = IDTDescriptor::new(int_0x76 as usize, 0x08, 0x8E);
        IDT[0x77] = IDTDescriptor::new(int_0x77 as usize, 0x08, 0x8E);
        IDT[0x78] = IDTDescriptor::new(int_0x78 as usize, 0x08, 0x8E);
        IDT[0x79] = IDTDescriptor::new(int_0x79 as usize, 0x08, 0x8E);
        IDT[0x7a] = IDTDescriptor::new(int_0x7a as usize, 0x08, 0x8E);
        IDT[0x7b] = IDTDescriptor::new(int_0x7b as usize, 0x08, 0x8E);
        IDT[0x7c] = IDTDescriptor::new(int_0x7c as usize, 0x08, 0x8E);
        IDT[0x7d] = IDTDescriptor::new(int_0x7d as usize, 0x08, 0x8E);
        IDT[0x7e] = IDTDescriptor::new(int_0x7e as usize, 0x08, 0x8E);
        IDT[0x7f] = IDTDescriptor::new(int_0x7f as usize, 0x08, 0x8E);
        IDT[0x80] = IDTDescriptor::new(int_0x80 as usize, 0x08, 0x8E);
        IDT[0x81] = IDTDescriptor::new(int_0x81 as usize, 0x08, 0x8E);
        IDT[0x82] = IDTDescriptor::new(int_0x82 as usize, 0x08, 0x8E);
        IDT[0x83] = IDTDescriptor::new(int_0x83 as usize, 0x08, 0x8E);
        IDT[0x84] = IDTDescriptor::new(int_0x84 as usize, 0x08, 0x8E);
        IDT[0x85] = IDTDescriptor::new(int_0x85 as usize, 0x08, 0x8E);
        IDT[0x86] = IDTDescriptor::new(int_0x86 as usize, 0x08, 0x8E);
        IDT[0x87] = IDTDescriptor::new(int_0x87 as usize, 0x08, 0x8E);
        IDT[0x88] = IDTDescriptor::new(int_0x88 as usize, 0x08, 0x8E);
        IDT[0x89] = IDTDescriptor::new(int_0x89 as usize, 0x08, 0x8E);
        IDT[0x8a] = IDTDescriptor::new(int_0x8a as usize, 0x08, 0x8E);
        IDT[0x8b] = IDTDescriptor::new(int_0x8b as usize, 0x08, 0x8E);
        IDT[0x8c] = IDTDescriptor::new(int_0x8c as usize, 0x08, 0x8E);
        IDT[0x8d] = IDTDescriptor::new(int_0x8d as usize, 0x08, 0x8E);
        IDT[0x8e] = IDTDescriptor::new(int_0x8e as usize, 0x08, 0x8E);
        IDT[0x8f] = IDTDescriptor::new(int_0x8f as usize, 0x08, 0x8E);
        IDT[0x90] = IDTDescriptor::new(int_0x90 as usize, 0x08, 0x8E);
        IDT[0x91] = IDTDescriptor::new(int_0x91 as usize, 0x08, 0x8E);
        IDT[0x92] = IDTDescriptor::new(int_0x92 as usize, 0x08, 0x8E);
        IDT[0x93] = IDTDescriptor::new(int_0x93 as usize, 0x08, 0x8E);
        IDT[0x94] = IDTDescriptor::new(int_0x94 as usize, 0x08, 0x8E);
        IDT[0x95] = IDTDescriptor::new(int_0x95 as usize, 0x08, 0x8E);
        IDT[0x96] = IDTDescriptor::new(int_0x96 as usize, 0x08, 0x8E);
        IDT[0x97] = IDTDescriptor::new(int_0x97 as usize, 0x08, 0x8E);
        IDT[0x98] = IDTDescriptor::new(int_0x98 as usize, 0x08, 0x8E);
        IDT[0x99] = IDTDescriptor::new(int_0x99 as usize, 0x08, 0x8E);
        IDT[0x9a] = IDTDescriptor::new(int_0x9a as usize, 0x08, 0x8E);
        IDT[0x9b] = IDTDescriptor::new(int_0x9b as usize, 0x08, 0x8E);
        IDT[0x9c] = IDTDescriptor::new(int_0x9c as usize, 0x08, 0x8E);
        IDT[0x9d] = IDTDescriptor::new(int_0x9d as usize, 0x08, 0x8E);
        IDT[0x9e] = IDTDescriptor::new(int_0x9e as usize, 0x08, 0x8E);
        IDT[0x9f] = IDTDescriptor::new(int_0x9f as usize, 0x08, 0x8E);
        IDT[0xa0] = IDTDescriptor::new(int_0xa0 as usize, 0x08, 0x8E);
        IDT[0xa1] = IDTDescriptor::new(int_0xa1 as usize, 0x08, 0x8E);
        IDT[0xa2] = IDTDescriptor::new(int_0xa2 as usize, 0x08, 0x8E);
        IDT[0xa3] = IDTDescriptor::new(int_0xa3 as usize, 0x08, 0x8E);
        IDT[0xa4] = IDTDescriptor::new(int_0xa4 as usize, 0x08, 0x8E);
        IDT[0xa5] = IDTDescriptor::new(int_0xa5 as usize, 0x08, 0x8E);
        IDT[0xa6] = IDTDescriptor::new(int_0xa6 as usize, 0x08, 0x8E);
        IDT[0xa7] = IDTDescriptor::new(int_0xa7 as usize, 0x08, 0x8E);
        IDT[0xa8] = IDTDescriptor::new(int_0xa8 as usize, 0x08, 0x8E);
        IDT[0xa9] = IDTDescriptor::new(int_0xa9 as usize, 0x08, 0x8E);
        IDT[0xaa] = IDTDescriptor::new(int_0xaa as usize, 0x08, 0x8E);
        IDT[0xab] = IDTDescriptor::new(int_0xab as usize, 0x08, 0x8E);
        IDT[0xac] = IDTDescriptor::new(int_0xac as usize, 0x08, 0x8E);
        IDT[0xad] = IDTDescriptor::new(int_0xad as usize, 0x08, 0x8E);
        IDT[0xae] = IDTDescriptor::new(int_0xae as usize, 0x08, 0x8E);
        IDT[0xaf] = IDTDescriptor::new(int_0xaf as usize, 0x08, 0x8E);
        IDT[0xb0] = IDTDescriptor::new(int_0xb0 as usize, 0x08, 0x8E);
        IDT[0xb1] = IDTDescriptor::new(int_0xb1 as usize, 0x08, 0x8E);
        IDT[0xb2] = IDTDescriptor::new(int_0xb2 as usize, 0x08, 0x8E);
        IDT[0xb3] = IDTDescriptor::new(int_0xb3 as usize, 0x08, 0x8E);
        IDT[0xb4] = IDTDescriptor::new(int_0xb4 as usize, 0x08, 0x8E);
        IDT[0xb5] = IDTDescriptor::new(int_0xb5 as usize, 0x08, 0x8E);
        IDT[0xb6] = IDTDescriptor::new(int_0xb6 as usize, 0x08, 0x8E);
        IDT[0xb7] = IDTDescriptor::new(int_0xb7 as usize, 0x08, 0x8E);
        IDT[0xb8] = IDTDescriptor::new(int_0xb8 as usize, 0x08, 0x8E);
        IDT[0xb9] = IDTDescriptor::new(int_0xb9 as usize, 0x08, 0x8E);
        IDT[0xba] = IDTDescriptor::new(int_0xba as usize, 0x08, 0x8E);
        IDT[0xbb] = IDTDescriptor::new(int_0xbb as usize, 0x08, 0x8E);
        IDT[0xbc] = IDTDescriptor::new(int_0xbc as usize, 0x08, 0x8E);
        IDT[0xbd] = IDTDescriptor::new(int_0xbd as usize, 0x08, 0x8E);
        IDT[0xbe] = IDTDescriptor::new(int_0xbe as usize, 0x08, 0x8E);
        IDT[0xbf] = IDTDescriptor::new(int_0xbf as usize, 0x08, 0x8E);
        IDT[0xc0] = IDTDescriptor::new(int_0xc0 as usize, 0x08, 0x8E);
        IDT[0xc1] = IDTDescriptor::new(int_0xc1 as usize, 0x08, 0x8E);
        IDT[0xc2] = IDTDescriptor::new(int_0xc2 as usize, 0x08, 0x8E);
        IDT[0xc3] = IDTDescriptor::new(int_0xc3 as usize, 0x08, 0x8E);
        IDT[0xc4] = IDTDescriptor::new(int_0xc4 as usize, 0x08, 0x8E);
        IDT[0xc5] = IDTDescriptor::new(int_0xc5 as usize, 0x08, 0x8E);
        IDT[0xc6] = IDTDescriptor::new(int_0xc6 as usize, 0x08, 0x8E);
        IDT[0xc7] = IDTDescriptor::new(int_0xc7 as usize, 0x08, 0x8E);
        IDT[0xc8] = IDTDescriptor::new(int_0xc8 as usize, 0x08, 0x8E);
        IDT[0xc9] = IDTDescriptor::new(int_0xc9 as usize, 0x08, 0x8E);
        IDT[0xca] = IDTDescriptor::new(int_0xca as usize, 0x08, 0x8E);
        IDT[0xcb] = IDTDescriptor::new(int_0xcb as usize, 0x08, 0x8E);
        IDT[0xcc] = IDTDescriptor::new(int_0xcc as usize, 0x08, 0x8E);
        IDT[0xcd] = IDTDescriptor::new(int_0xcd as usize, 0x08, 0x8E);
        IDT[0xce] = IDTDescriptor::new(int_0xce as usize, 0x08, 0x8E);
        IDT[0xcf] = IDTDescriptor::new(int_0xcf as usize, 0x08, 0x8E);
        IDT[0xd0] = IDTDescriptor::new(int_0xd0 as usize, 0x08, 0x8E);
        IDT[0xd1] = IDTDescriptor::new(int_0xd1 as usize, 0x08, 0x8E);
        IDT[0xd2] = IDTDescriptor::new(int_0xd2 as usize, 0x08, 0x8E);
        IDT[0xd3] = IDTDescriptor::new(int_0xd3 as usize, 0x08, 0x8E);
        IDT[0xd4] = IDTDescriptor::new(int_0xd4 as usize, 0x08, 0x8E);
        IDT[0xd5] = IDTDescriptor::new(int_0xd5 as usize, 0x08, 0x8E);
        IDT[0xd6] = IDTDescriptor::new(int_0xd6 as usize, 0x08, 0x8E);
        IDT[0xd7] = IDTDescriptor::new(int_0xd7 as usize, 0x08, 0x8E);
        IDT[0xd8] = IDTDescriptor::new(int_0xd8 as usize, 0x08, 0x8E);
        IDT[0xd9] = IDTDescriptor::new(int_0xd9 as usize, 0x08, 0x8E);
        IDT[0xda] = IDTDescriptor::new(int_0xda as usize, 0x08, 0x8E);
        IDT[0xdb] = IDTDescriptor::new(int_0xdb as usize, 0x08, 0x8E);
        IDT[0xdc] = IDTDescriptor::new(int_0xdc as usize, 0x08, 0x8E);
        IDT[0xdd] = IDTDescriptor::new(int_0xdd as usize, 0x08, 0x8E);
        IDT[0xde] = IDTDescriptor::new(int_0xde as usize, 0x08, 0x8E);
        IDT[0xdf] = IDTDescriptor::new(int_0xdf as usize, 0x08, 0x8E);
        IDT[0xe0] = IDTDescriptor::new(int_0xe0 as usize, 0x08, 0x8E);
        IDT[0xe1] = IDTDescriptor::new(int_0xe1 as usize, 0x08, 0x8E);
        IDT[0xe2] = IDTDescriptor::new(int_0xe2 as usize, 0x08, 0x8E);
        IDT[0xe3] = IDTDescriptor::new(int_0xe3 as usize, 0x08, 0x8E);
        IDT[0xe4] = IDTDescriptor::new(int_0xe4 as usize, 0x08, 0x8E);
        IDT[0xe5] = IDTDescriptor::new(int_0xe5 as usize, 0x08, 0x8E);
        IDT[0xe6] = IDTDescriptor::new(int_0xe6 as usize, 0x08, 0x8E);
        IDT[0xe7] = IDTDescriptor::new(int_0xe7 as usize, 0x08, 0x8E);
        IDT[0xe8] = IDTDescriptor::new(int_0xe8 as usize, 0x08, 0x8E);
        IDT[0xe9] = IDTDescriptor::new(int_0xe9 as usize, 0x08, 0x8E);
        IDT[0xea] = IDTDescriptor::new(int_0xea as usize, 0x08, 0x8E);
        IDT[0xeb] = IDTDescriptor::new(int_0xeb as usize, 0x08, 0x8E);
        IDT[0xec] = IDTDescriptor::new(int_0xec as usize, 0x08, 0x8E);
        IDT[0xed] = IDTDescriptor::new(int_0xed as usize, 0x08, 0x8E);
        IDT[0xee] = IDTDescriptor::new(int_0xee as usize, 0x08, 0x8E);
        IDT[0xef] = IDTDescriptor::new(int_0xef as usize, 0x08, 0x8E);
        IDT[0xf0] = IDTDescriptor::new(int_0xf0 as usize, 0x08, 0x8E);
        IDT[0xf1] = IDTDescriptor::new(int_0xf1 as usize, 0x08, 0x8E);
        IDT[0xf2] = IDTDescriptor::new(int_0xf2 as usize, 0x08, 0x8E);
        IDT[0xf3] = IDTDescriptor::new(int_0xf3 as usize, 0x08, 0x8E);
        IDT[0xf4] = IDTDescriptor::new(int_0xf4 as usize, 0x08, 0x8E);
        IDT[0xf5] = IDTDescriptor::new(int_0xf5 as usize, 0x08, 0x8E);
        IDT[0xf6] = IDTDescriptor::new(int_0xf6 as usize, 0x08, 0x8E);
        IDT[0xf7] = IDTDescriptor::new(int_0xf7 as usize, 0x08, 0x8E);
        IDT[0xf8] = IDTDescriptor::new(int_0xf8 as usize, 0x08, 0x8E);
        IDT[0xf9] = IDTDescriptor::new(int_0xf9 as usize, 0x08, 0x8E);
        IDT[0xfa] = IDTDescriptor::new(int_0xfa as usize, 0x08, 0x8E);
        IDT[0xfb] = IDTDescriptor::new(int_0xfb as usize, 0x08, 0x8E);
        IDT[0xfc] = IDTDescriptor::new(int_0xfc as usize, 0x08, 0x8E);
        IDT[0xfd] = IDTDescriptor::new(int_0xfd as usize, 0x08, 0x8E);
        IDT[0xfe] = IDTDescriptor::new(int_0xfe as usize, 0x08, 0x8E);
        IDT[0xff] = IDTDescriptor::new(int_0xff as usize, 0x08, 0x8E);

        IDTR.limit = core::mem::size_of::<Idt>() as u16 - 1;
        IDTR.base = &raw const IDT as usize;
        core::arch::asm!("lidt ({0})", in(reg) &raw const IDTR as usize, options(att_syntax));

        // Programming PIC
        u8::write(0x20, 0x11); // Remap master PIC
        u8::write(0xa0, 0x11); // Remap slave PIC
        u8::write(0x21, 0x20); // Master PIC offset 0x20
        u8::write(0xa1, 0x28); // Slave PIC offset 0x28
        u8::write(0x21, 4); // Tell master PIC that there is a slave PIC at IRQ2 (0000 0100)
        u8::write(0xa1, 2); // Tell slave PIC its cascade identity (0000 0010)
        u8::write(0x21, 0x01); // 8086 mode
        u8::write(0xa1, 0x01); // 8086 mode
        u8::write(0x21, 0x00); // Master PIC mask
        u8::write(0xa1, 0x00); // Slave PIC mask
        enable();
    }
    crate::println!("IDT is setup");
}
